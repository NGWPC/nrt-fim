[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "./src/trainer/_version.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/trainer"]

[tool.hatch.build.targets.sdist]
packages = ["src/trainer"]

[project]
name = "trainer"
description = "A tool for training deep learning models for FIM"
readme = "README.md"
dynamic = ["version"]
requires-python = ">= 3.12"
license = { file = "LICENSE" }
authors = [
  { name = "Tadd Bindas", email = "tadd.bindas@ertcorp.com" },
  { name = "Farshid Rahmani", email = "Farshid.Rahmani@rtx.com" },
  { name = "Quercus Hamlin", email = "qhamlin@asrcfederal.com" },
  { name = "Sylvia Chin", email = "sylvia.c.chin@rtx.com" },
  { name = "Daniel Cumpton", email = "dcumpton@rtx.com" },
  { name = "Brock Hinkson", email = "brock.w.hinkson@rtx.com" },
]
maintainers = [
  { name = "Tadd Bindas", email = "tadd.bindas@ertcorp.com" },
  { name = "Farshid Rahmani", email = "Farshid.Rahmani@rtx.com" },
  { name = "Quercus Hamlin", email = "qhamlin@asrcfederal.com" },
  { name = "Sylvia Chin", email = "sylvia.c.chin@rtx.com" },
  { name = "Daniel Cumpton", email = "dcumpton@rtx.com" },
  { name = "Brock Hinkson", email = "brock.w.hinkson@rtx.com" },
]

dependencies = [
  "numpy==2.3.2",
  "pandas==2.2.3",
  "cubed-xarray==0.0.7",
  "fiona==1.10.1",
  "fsspec==2025.5.1",
  "geodatasets==2024.8.0",
  "geopandas==1.0.1",
  "h5netcdf==1.6.1",
  "h5py==3.13.0",
  "pydantic==2.10.6",
  "xarray==2025.07.1",
  "scipy==1.15.3",
  "hydra-core==1.3.2",
  "tqdm==4.67.1",
  "zarr==3.1.0",
  "sympy==1.13.1",
  "scikit-learn==1.6.1",
  "matplotlib==3.10.3",
  "rioxarray==0.19.0",
  "s3fs==2025.5.1",
  "geocube==0.7.1",
  "python-dotenv==1.1.0",
  "pystac==1.13.0",
  "boto3==1.37.1",
  "click==8.2.1",
  "torch==2.6.0",
  "torchvision==0.21.0",
  "torchgeo>=0.7.1",
  "awscli>=1.38.3",
]

[project.optional-dependencies]
tests = [
    "pytest==8.4.1",
    "pytest-cov==6.1.1",
]

dev = ["pre-commit", "ruff", "black", "mypy"]

docs = [
  "pillow",
  "cairosvg",
  "mkdocs-material",
  "mkdocs-git-committers-plugin",
  "mkdocs-material-extensions",
  "mkdocs-git-authors-plugin",
  "mkdocs-git-revision-date-localized-plugin",
]

jupyter = ["ipykernel", "jupyterlab"]
cpu = ["torch==2.6.0", "torchvision==0.21.0"]
cu124 = ["torch==2.6.0", "torchvision==0.21.0"]

[tool.uv]
conflicts = [[{ extra = "cpu" }, { extra = "cu124" }]]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu124", extra = "cu124" },
]
torchvision = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu124", extra = "cu124" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.black]
line-length = 110
skip-string-normalization = true
preview = true
target-version = ['py311']

[tool.ruff]
line-length = 110
lint.select = [
  "F",      # Errors detected by Pyflakes
  "E",      # Error detected by Pycodestyle
  "W",      # Warning detected by Pycodestyle
  "I",      # isort
  "D",      # pydocstyle
  "B",      # flake8-bugbear
  "Q",      # flake8-quotes
  "TID",    # flake8-tidy-imports
  "C4",     # flake8-comprehensions
  "BLE",    # flake8-blind-except
  "UP",     # pyupgrade
  "RUF100", # Report unused noqa directives
]
lint.ignore = [
  # line too long -> we accept long comment lines; black gets rid of long code lines
  "E501",
  # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E731",
  # allow I, O, l as variable names -> I is the identity matrix
  "E741",
  # Missing docstring in public package
  "D104",
  # Missing docstring in public module
  "D100",
  # Missing docstring in __init__
  "D107",
  # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "B008",
  # __magic__ methods are are often self-explanatory, allow missing docstrings
  "D105",
  # first line should end with a period [Bug: doesn't work with single-line docstrings]
  "D400",
  # First line should be in imperative mood; try rephrasing
  "D401",
  ## Disable one in each pair of mutually incompatible rules
  # We don't want a blank line before a class docstring
  "D203",
  # We want docstrings to start immediately after the opening triple quote
  "D213",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
strict_optional = true
ignore_missing_imports = true
disallow_any_unimported = true
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_unused_ignores = true
